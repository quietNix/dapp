{"version":3,"sources":["../node_modules/gun sync","utility/user.js","state/action.js","component/Header.jsx","component/ChatMessage.jsx","component/Login.jsx","component/Chat.jsx","component/App.jsx","state/reducers.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","db","Gun","peers","user","recall","sessionStorage","SetUsername","username","store","dispatch","type","payload","get","on","v","event","a","alias","console","log","connect","state","className","src","alt","onClick","leave","ChatMessage","props","messageClass","who","sender","avatar","ts","Date","when","what","toLocaleTimeString","Login","login","document","getElementById","value","password","auth","err","alert","htmlFor","name","minLength","maxLength","create","SEA","GUN","unreadMessages","autoScroll","objDiv","scrollTop","scrollHeight","useState","canAutoScroll","setAutoScroll","newMessage","setNewMessage","messages","setMessages","m","preventDefault","encrypt","secret","index","toISOString","message","set","put","useEffect","map","once","data","key","decrypt","is","slice","sort","b","onScroll","onSubmit","placeholder","onChange","target","disabled","App","params","initialState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createStore","action","ReactDOM","render","StrictMode"],"mappings":"kFAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,uKCDZC,G,YAAKC,IAAI,CAClBC,MAAO,CAEH,8CAMKC,EAAOH,EAAGG,OAAOC,OAAO,CAAEC,gBAAgB,IAIhD,SAASC,EAAYC,GACxBC,EAAMC,SCpBC,CACHC,KAAM,mBACNC,QDkBuBJ,IAO/BJ,EAAKS,IAAI,SAASC,IAAG,SAAAC,GAAC,OAAIR,EAAYQ,MAEtCd,EAAGa,GAAG,OAAN,uCAAc,WAAOE,GAAP,eAAAC,EAAA,sEACUb,EAAKS,IAAI,SADnB,OAEVN,EADMW,EADI,QAGVC,QAAQC,IAAR,uBAA4BF,IAHlB,2CAAd,uD,WEMeG,mBAhCS,SAACC,GACrB,MAAO,CACHd,SAAUc,EAAMd,YA8BTa,EA1Bf,YAA+B,IAAbb,EAAY,EAAZA,SAOd,OACI,mCACI,8CACe,KAAbA,EACE,2CAEA,eAAC,WAAD,WACI,sBAAKe,UAAU,WAAf,UACI,+BAAM,iCAASf,MACf,qBAAKgB,IAAG,oDAA+ChB,EAA/C,QAA+DiB,IAAI,cAE/E,wBAAQF,UAAU,iBAAiBG,QAhBnD,WACItB,EAAKuB,QACLpB,EAAY,KAcA,+B,sBCTLqB,MAjBf,SAAqBC,GACjB,IAAMC,EAAeD,EAAME,MAAQF,EAAMG,OAAS,OAAS,WACrDC,EAAM,oDAAgDJ,EAAME,IAAtD,QACNG,EAAK,IAAIC,KAAKN,EAAMO,MAE1B,OACI,sBAAKb,UAAS,kBAAaO,GAA3B,UAEI,qBAAKN,IAAKS,EAAQR,IAAI,WACtB,sBAAKF,UAAU,eAAf,UACI,4BAAIM,EAAMQ,OACV,+BAAOH,EAAGI,8BC8BXC,MAxCf,WAMI,SAASC,IACL,IAAIhC,EAAWiC,SAASC,eAAe,YAAYC,MAC/CC,EAAWH,SAASC,eAAe,YAAYC,MACnDvC,EAAKyC,KAAKrC,EAAUoC,GAAU,gBAAGE,EAAH,EAAGA,IAAH,OAAaA,GAAOC,MAAMD,MAiB5D,OACI,gCACI,uBAAOE,QAAQ,WAAf,sBACA,uBAAOzB,UAAU,aAAavB,GAAG,WAAWiD,KAAK,WAAWN,MA3BhEnC,UA2BiF0C,UAAU,IAAIC,UAAU,OAErG,uBAAOH,QAAQ,WAAf,sBACA,uBAAOzB,UAAU,aAAavB,GAAG,WAAWiD,KAAK,WAAWN,MA7BhEC,UA6BiFjC,KAAK,aAElF,wBAAQY,UAAU,QAAQG,QAASc,EAAnC,mBACA,wBAAQjB,UAAU,QAAQG,QArBlC,WACI,IAAIlB,EAAWiC,SAASC,eAAe,YAAYC,MAC/CC,EAAWH,SAASC,eAAe,YAAYC,MACnDvC,EAAKgD,OAAO5C,EAAUoC,GAAU,YAAc,IAAXE,EAAU,EAAVA,IAC3BA,EACAC,MAAMD,GAENN,QAcJ,yBC9BNa,EAAMC,IAAID,IAIZE,GAAiB,EAErB,SAASC,IACL,IAAIC,EAAShB,SAASC,eAAe,QACrCe,EAAOC,UAAYD,EAAOE,aAmHftC,mBAvGS,SAACC,GACrB,MAAO,CACHd,SAAUc,EAAMd,YAqGTa,EAjGf,YAA6B,IAAbb,EAAY,EAAZA,SAEZ,EAAsCoD,oBAAS,GAA/C,mBAAMC,EAAN,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEIC,EAAI,GANgB,4CA4CxB,WAA2BnD,GAA3B,mBAAAC,EAAA,6DACID,EAAMoD,iBADV,SAEyBf,EAAIgB,QAAQN,EAAY,WAFjD,OAEUO,EAFV,OAGUC,GAAQ,IAAIpC,MAAOqC,cACnBC,EAAUrE,EAAKS,IAAI,OAAO6D,IAAI,CAAErC,KAAMiC,IAC5CrE,EAAGY,IAAI,QAAQA,IAAI0D,GAAOI,IAAIF,GAC9BT,EAAc,IACdF,GAAc,GACdN,IARJ,6CA5CwB,sBAuDxB,OA9CAoB,qBAAU,WACQ,KAAXpE,GAEHP,EAAGY,IAAI,QACFgE,MAEAC,KAHL,uCAGU,WAAOC,EAAM/E,GAAb,iBAAAiB,EAAA,0DACE8D,EADF,wBAGQC,EAAM,UAHd,SAMiB/E,EAAGG,KAAK2E,GAAMlE,IAAI,SANnC,mCAOmBwC,EAAI4B,QAAQF,EAAK1C,KAAM2C,GAP1C,6BAOkD,GAPlD,KAQY1B,IAAIhC,MAAM4D,GAAGH,EAAM,SAJzBN,EAJN,CAMM1C,IANN,KAOMM,KAPN,KAQMD,KARN,OAWcC,OACR8B,EAAI,sBAAIA,EAAEgB,OAAO,KAAb,CAAkBV,IAASW,MAAK,SAACnE,EAAGoE,GAAJ,OAAUpE,EAAEmB,KAAOiD,EAAEjD,QACzD8B,EAAYC,GACRN,GAAgBL,IAAcM,GAAc,IAC3CP,GAAiB,GAf5B,4CAHV,2DAsBD,CAAC/C,IAsBA,qBAAKe,UAAU,YAAf,SAEmB,KAAbf,EACE,qBAAKe,UAAU,WAAf,SACI,cAAC,EAAD,MAGJ,eAAC,WAAD,WAEI,sBAAM+D,SAAU,WAAKnE,QAAQC,IAAI,WAAcpB,GAAG,OAAlD,SACKiE,EAASY,KAAI,SAAAJ,GACV,OACI,cAAC,EAAD,CACIzE,GAAIyE,EAAQrC,KAEZA,KAAMqC,EAAQrC,KACdC,KAAMoC,EAAQpC,KACdN,IAAK0C,EAAQ1C,IACbC,OAAQxB,GAJHiE,EAAQrC,WAS7B,uBAAMmD,SA/EE,4CA+ER,UACI,uBAAO5E,KAAK,OAAO6E,YAAY,oBAAoBC,SA3CvE,SAAsBzE,GAClB,IAAQ2B,EAAU3B,EAAM0E,OAAhB/C,MACRqB,EAAcrB,IAyC6EA,MAAOoB,EAAYZ,UAAU,QACxG,wBAAQ5B,UAAU,aAAaZ,KAAK,SAASgF,UAAW5B,EAAxD,mCAEFF,EAMI,GALF,qBAAKtC,UAAU,gBAAf,SACI,wBAAQG,QAAS8B,EAAjB,SACKD,EAAgB,eAAK,2BC3GvCqC,MATf,SAAaC,GACX,OACE,sBAAKtE,UAAY,MAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,QCRAuE,EAAe,CACjBtF,SAAU,ICWCuF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCDvF,EAAQ+F,aFJa,WAAoC,IAAnClF,EAAkC,uDAA1BwE,EAAcW,EAAY,uDAAL,GAC5D,MACS,qBADFA,EAAO9F,KAEN,2BAAUW,GAAV,IAAiBd,SAAUiG,EAAO7F,UAE3BU,KEAnBoF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUnG,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJgC,SAASC,eAAe,SAG1BqD,M","file":"static/js/main.f9bc4f90.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 13;","import Gun from \"gun\";\r\nimport 'gun/sea';\r\nimport 'gun/axe';\r\nimport { store } from \"../index\";\r\nimport { setUsername } from \"../state/action\";\r\n\r\n// Database\r\nexport const db = Gun({\r\n    peers: [\r\n        // 'http://localhost:3030/gun'\r\n        'https://quietnix-dapp.herokuapp.com/gun'\r\n    ]\r\n});\r\n\r\n\r\n// Gun User\r\nexport const user = db.user().recall({ sessionStorage: true });\r\n\r\n\r\n//set global state here named username\r\nexport function SetUsername(username) {\r\n    store.dispatch(setUsername(username))\r\n    // store.dispatch({\r\n    //     type: \"USER_AUTH_STATUS\",\r\n    //     payload: username\r\n    // })\r\n}\r\n\r\nuser.get('alias').on(v => SetUsername(v))\r\n\r\ndb.on('auth', async (event) => {\r\n    const alias = await user.get('alias'); // username string\r\n    SetUsername(alias);\r\n    console.log(`signed in as ${alias}`);\r\n});","export const setUsername=(verdict)=>{\r\n    return({\r\n        type: \"USER_AUTH_STATUS\",\r\n        payload: verdict\r\n    })\r\n}","import React, { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { user, SetUsername } from \"../utility/user\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        username: state.username\r\n    }\r\n}\r\n\r\nfunction Header({ username }) {\r\n\r\n    function signout() {\r\n        user.leave();\r\n        SetUsername('')\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <h1>💬</h1>\r\n            {(username === '') ?\r\n                <h3>Dapp Chat</h3>\r\n                :\r\n                <Fragment>\r\n                    <div className=\"user-bio\">\r\n                        <span><strong>{username}</strong></span>\r\n                        <img src={`https://avatars.dicebear.com/api/initials/${username}.svg`} alt=\"avatar\" />\r\n                    </div>\r\n                    <button className=\"signout-button\" onClick={signout}>Sign Out</button>\r\n                </Fragment>\r\n            }\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);","import React from \"react\";\r\n\r\nfunction ChatMessage(props){\r\n    const messageClass = props.who === props.sender ? 'sent' : 'received';\r\n    const avatar = `https://avatars.dicebear.com/api/initials/${props.who}.svg`;\r\n    const ts = new Date(props.when);\r\n\r\n    return(\r\n        <div className={`message ${messageClass}`}>\r\n            \r\n            <img src={avatar} alt=\"avatar\" />\r\n            <div className=\"message-text\">\r\n                <p>{props.what}</p>\r\n                <time>{ts.toLocaleTimeString()}</time>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessage;","import React from \"react\";\r\nimport { user } from '../utility/user';\r\n\r\nfunction Login() {\r\n\r\n    let username;\r\n    let password;\r\n\r\n    //USER AUTHENTICATION\r\n    function login() {\r\n        let username = document.getElementById(\"username\").value;\r\n        let password = document.getElementById(\"password\").value;\r\n        user.auth(username, password, ({ err }) => err && alert(err));\r\n    }\r\n\r\n    //enforce Uniqueness of user\r\n    //USER CREATION\r\n    function signup() {\r\n        let username = document.getElementById(\"username\").value;\r\n        let password = document.getElementById(\"password\").value;\r\n        user.create(username, password, ({ err }) => {\r\n            if (err) {\r\n                alert(err);\r\n            } else {\r\n                login();\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input className=\"credential\" id=\"username\" name=\"username\" value={username} minLength=\"3\" maxLength=\"16\" />\r\n            \r\n            <label htmlFor=\"password\">Password</label>\r\n            <input className=\"credential\" id=\"password\" name=\"password\" value={password} type=\"password\" />\r\n            \r\n            <button className=\"login\" onClick={login}>Login</button>\r\n            <button className=\"login\" onClick={signup}>Sign Up</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { db, user } from \"../utility/user\";\r\nimport { connect } from \"react-redux\";\r\nimport debounce from 'lodash.debounce';\r\nimport ChatMessage from './ChatMessage';\r\nimport Login from \"./Login\";\r\n\r\nimport GUN from \"gun\";\r\nconst SEA = GUN.SEA;\r\n\r\n\r\n// let lastScrollTop;\r\nlet unreadMessages = false;\r\n\r\nfunction autoScroll() {\r\n    var objDiv = document.getElementById(\"cont\");\r\n    objDiv.scrollTop = objDiv.scrollHeight;\r\n}\r\n\r\n// function watchScroll(e) {\r\n//     canAutoScroll = (e.target.scrollTop || Infinity) > lastScrollTop;\r\n//     lastScrollTop = e.target.scrollTop;\r\n// }\r\n\r\n// let debouncedWatchScroll = debounce(watchScroll, 1000);\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        username: state.username\r\n    }\r\n}\r\n\r\nfunction Chat({ username }) {\r\n\r\n    const[canAutoScroll, setAutoScroll] = useState(true);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    let m = [];\r\n\r\n    //ACCESSING DATA\r\n    useEffect(() => {\r\n        if(username==='') return;\r\n\r\n        db.get(\"chat\")  //if multiple chatrooms, give each one a different name\r\n            .map()\r\n            //   .on()      //since its immutable\r\n            .once(async (data, id) => {\r\n                if (data) {\r\n                    // Key for end-to-end encryption\r\n                    const key = '#Nikhil';\r\n                    var message = {\r\n                        // transform the data\r\n                        who: await db.user(data).get('alias'), // a user might lie who they are! So let the user system detect whose data it is.\r\n                        what: (await SEA.decrypt(data.what, key)) + '', // force decrypt as text.\r\n                        when: GUN.state.is(data, 'what'), // get the internal timestamp for the what property.\r\n                    };\r\n\r\n                    if (message.what) {\r\n                        m = [...m.slice(-50), message].sort((a, b) => a.when - b.when); //will keep only latest 100 in array\r\n                        setMessages(m);\r\n                        if (canAutoScroll) {autoScroll(); setAutoScroll(false)}\r\n                        else unreadMessages = true;\r\n                    }\r\n                }\r\n            })\r\n    }, [username]);\r\n\r\n\r\n    function handleChange(event) {\r\n        const { value } = event.target;\r\n        setNewMessage(value);\r\n    }\r\n\r\n\r\n    //SENDING DATA\r\n    async function sendMessage(event) {\r\n        event.preventDefault();\r\n        const secret = await SEA.encrypt(newMessage, '#Nikhil');\r\n        const index = new Date().toISOString();\r\n        const message = user.get('all').set({ what: secret });\r\n        db.get('chat').get(index).put(message);\r\n        setNewMessage('');\r\n        setAutoScroll(true);\r\n        autoScroll(); \r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            {(username === '') ?\r\n                <div className=\"div-main\">\r\n                    <Login />\r\n                </div>\r\n                :\r\n                <Fragment>\r\n                    {/* <main onScroll={debouncedWatchScroll} id=\"cont\"> */}\r\n                    <main onScroll={()=>{console.log(\"scroll\"); }} id=\"cont\">\r\n                        {messages.map(message => {\r\n                            return (\r\n                                <ChatMessage\r\n                                    id={message.when}\r\n                                    key={message.when}\r\n                                    when={message.when}\r\n                                    what={message.what}\r\n                                    who={message.who}\r\n                                    sender={username}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </main>\r\n                    <form onSubmit={sendMessage}>\r\n                        <input type=\"text\" placeholder=\"Type a message...\" onChange={handleChange} value={newMessage} maxLength=\"100\" />\r\n                        <button className=\"sent-emogy\" type=\"submit\" disabled={!newMessage}>🛩️</button>\r\n                    </form>\r\n                    {!canAutoScroll ?\r\n                        <div className=\"scroll-button\">\r\n                            <button onClick={autoScroll}>\r\n                                {unreadMessages ?\"💬\":\"👇\"}\r\n                            </button>\r\n                        </div>\r\n                        : \"\"\r\n                    }\r\n                </Fragment>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(Chat);","import React from \"react\";\nimport Header from \"./Header\";\nimport Chat from \"./Chat\";\n\nfunction App(params) {\n  return(\n    <div className = \"app\">\n      <Header/>\n      <Chat/>\n    </div>\n  )\n}\n\nexport default App;","const initialState = {\r\n    username: ''\r\n}\r\n\r\nexport const requestUserReducer = (state = initialState, action={})=>{\r\n    switch(action.type){\r\n        case \"USER_AUTH_STATUS\":\r\n            return{...state, username: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore} from \"redux\";\nimport App from './component/App';\nimport { requestUserReducer } from \"./state/reducers\";\nimport reportWebVitals from './reportWebVitals';\n\nexport const store = createStore(requestUserReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}